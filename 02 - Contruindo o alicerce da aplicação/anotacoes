Back -end -  MVC
-> Client -> JS

Frameworks um modelo MVC no Front-end.
Versão 1.X

Importante: 1° Exercicio.

tempo: 03:36

_____________________________________

Preparando o ambiente:

- Ter o node instalado.
Entrar no diretorio do projeto e npm install. (projeto que ja contem todos os endpoint que o front-end irá utilizar)


ATENÇÃO USUÁRIOS DE WINDOWS: se por acaso mensagens de erro forem exibidas, procure pelo texto npm ERR! self signed certificate. Se ele existir, isso indica um problema no certificado do seu roteador (proxy). Não se preocupe, basta rodar o comando no terminal npm set strict-ssl false que resolvera este problema.

Em menos de um minuto, todas as dependências para rodar o servidor terão sido baixadas. Para subi-lo utilizamos o comando:

npm start
Repare que seu terminal ficará aguardando indefinidamente, sinal de que o servidor está escutando. Agora é só abrir o navegador no endereço http://localhost:3000. Uma página de boas-vindas será exibida.

Curiosidade
O projeto Alurapic utiliza Express para criar endpoints REST e o NeDB, um banco de dados totalmente feito em Node.js e que não necessita qualquer configuração especial.

_____________________________________

Modulo: forma com que o AngularJS organiza a aplicação.
Objeto Global: angular (script disponibilizado pelo angular);

angular.module('alurapic',[]); -> Criando modulo.
angular.module('alurapic').controller(); -> Criando Controller.

ng-app="alurapic" -> angular carrega o modulo automaticamente no inicio da aplicação.

View:  termo utilizado para paginas Web (front end)
{{angular expression}}
Exemplo:  <img src="{{foto.url}}" alt="{{foto.titulo}}"

Controller:  é quem vai disponibilizar  os dados que a view precisa.
É uma boa prática criar os controller em arquivos separados.

Conversão no angular cada palavras iniciar com Letra maiscula na nomenclatura dos COntrollers.

OBS:  uma view pode ter muitos controllers.

-> DIRETIVAS:  comandos do angular com funcionalidade.
    ng-controller
    ng-app


$scope: é o escope que o controlador vai enxergar definido nas TAGs html.

Usamos Angular Expressions para abrir "lacunas" em views. 
Essa ideia remete ao uso de templates: modelos com uma base pronta, 
mas que possuem trechos de informações dinâmicas. 
Essas informações dinâmicas são fornecidas pelos nossos controllers. 
A sintaxe de uma AE é {{nomeDaPropriedade}}.


Data binding significa associação de dado, isto é,
podemos associar um dado à view através de Angular Expression e
qualquer mudança nesse dado refletirá na sua apresentação na view.